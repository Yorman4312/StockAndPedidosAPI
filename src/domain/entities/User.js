/**
 * USER.JS - ENTIDAD DE DOMINIO "USER"
 * ====================================
 * 
 * Representa la entidad "Usuario" dentro de la capa de dominio.
 * Define atributos y validaciones esenciales para los usuarios
 * que interact√∫an en el sistema de e-commerce (clientes, admins, etc).
 * 
 * CAMPOS PRINCIPALES:
 * - id: Identificador √∫nico del usuario
 * - name: Nombre completo del usuario (obligatorio, m√≠nimo 2 caracteres)
 * - email: Correo electr√≥nico v√°lido (obligatorio, m√≠nimo 8 caracteres y debe incluir "@")
 * - password: Contrase√±a de acceso (obligatoria, m√≠nimo 4 caracteres)
 * - rol: Rol dentro del sistema (ej: "admin", "customer", "seller") (obligatorio)
 * - createdAt: Fecha de registro del usuario
 * 
 * üö® VALIDACIONES:
 * - `name`: requerido, m√≠nimo 2 caracteres
 * - `email`: requerido, m√≠nimo 8 caracteres, debe contener "@"
 * - `password`: requerido, m√≠nimo 4 caracteres
 * - `rol`: requerido, m√≠nimo 2 caracteres
 * 
 * CASOS DE USO T√çPICOS:
 * - Registrar un nuevo usuario (cliente, administrador, vendedor)
 * - Autenticaci√≥n de usuario en el sistema
 * - Asignaci√≥n de roles y permisos seg√∫n tipo de usuario
 * - Consultar y actualizar datos de perfil
 * 
 * üîÑ RELACI√ìN CON OTRAS ENTIDADES:
 * - Relaci√≥n con Order ‚Üí un usuario puede tener m√∫ltiples √≥rdenes asociadas
 * 
 * üîê CONSIDERACIONES:
 * - La contrase√±a deber√≠a almacenarse de forma encriptada (no en texto plano)
 * - Los roles determinan los permisos de acceso (principio de autorizaci√≥n)
 * - Los correos deben ser √∫nicos en la base de datos
 * 
 * PATRONES Y PRINCIPIOS:
 * - Clean Architecture ‚Üí Entidad de dominio pura, sin dependencias externas
 * - SRP (Single Responsibility Principle) ‚Üí Solo modela un usuario y sus reglas b√°sicas
 */

class User {
  /**
   * Constructor de la entidad User
   * @param {Object} params - Par√°metros para construir el usuario
   * @param {string} params.id - Identificador √∫nico del usuario
   * @param {string} params.name - Nombre del usuario (m√≠nimo 2 caracteres)
   * @param {string} params.email - Correo electr√≥nico v√°lido
   * @param {string} params.password - Contrase√±a (m√≠nimo 4 caracteres)
   * @param {string} params.rol - Rol asignado al usuario (ej: "admin", "customer")
   * @param {Date} params.createdAt - Fecha de creaci√≥n del usuario
   * @throws {Error} - Si name, email, password o rol no cumplen validaciones
   */
  constructor({ id, name, email, password, rol, createdAt }) {
    if(!name || name.length < 2) throw new Error("‚ùå Nombre inv√°lido ‚ùå");

    if(!email || email.length < 8 || !email.includes("@")) throw new Error("‚ùå Email inv√°lido ‚ùå");

    if(!password || password.length < 4) throw new Error("‚ùå Contrasena inv√°lida ‚ùå");

    if(!rol || rol.length < 2) throw new Error("‚ùå Rol inv√°lido ‚ùå");

    this.id = id;
    this.name = name;
    this.email = email;
    this.password = password;
    this.rol = rol;
    this.createdAt = createdAt;
  }
}

export default User;
