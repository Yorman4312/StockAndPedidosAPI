/**
 * LOGINUSER.JS - CASO DE USO PARA INICIO DE SESI√ìN DE USUARIOS
 * =============================================================
 * 
 * Este caso de uso maneja la autenticaci√≥n de un usuario mediante
 * email y contrase√±a, verificando credenciales y generando un token
 * de acceso (JWT) para sesiones seguras.
 * 
 * Funcionalidades:
 * - Validaci√≥n de credenciales (email y contrase√±a)
 * - Comparaci√≥n de contrase√±as encriptadas con bcrypt (u otro encrypter)
 * - Generaci√≥n de un token JWT seguro
 * - Retorno de la informaci√≥n del usuario (sin password)
 * 
 * CASOS DE USO T√çPICOS:
 * - Inicio de sesi√≥n en el sistema
 * - Generaci√≥n de token para acceder a rutas protegidas
 * - Autenticaci√≥n en panel administrativo
 * 
 * INFORMACI√ìN RETORNADA:
 * - token: JWT con id y email del usuario
 * - user: Objeto con informaci√≥n b√°sica del usuario
 *   (excluye password y campos internos como __v)
 * 
 * üîê CONSIDERACIONES DE SEGURIDAD:
 * - Nunca retornar contrase√±as (ni siquiera encriptadas)
 * - El token debe tener expiraci√≥n y estar firmado con secret seguro
 * - Implementar bloqueo tras m√∫ltiples intentos fallidos de login
 * - Almacenar el token en cliente de manera segura (HTTPOnly Cookie o Secure Storage)
 * 
 * Patr√≥n de dise√±o: Clean Architecture / Use Case Pattern
 * Principio SOLID: Single Responsibility Principle
 */

export default class LoginUser {
  /**
   * Constructor de la clase LoginUser
   * @param {Object} userRepository - Repositorio para acceder a los datos de usuarios
   * @param {Object} passwordEncrypter - Servicio para comparar contrase√±as encriptadas
   * @param {Object} tokenGenerator - Servicio para generar tokens JWT
   */
  constructor(userRepository, passwordEncrypter, tokenGenerator) {
    this.userRepository = userRepository;
    this.passwordEncrypter = passwordEncrypter;
    this.tokenGenerator = tokenGenerator;
  }

  /**
   * Ejecuta el proceso de login de un usuario
   * @param {Object} params - Par√°metros del login
   * @param {string} params.email - Correo electr√≥nico del usuario
   * @param {string} params.password - Contrase√±a ingresada por el usuario
   * @returns {Promise<{token: string, user: Object}>} - Devuelve el token de acceso y los datos del usuario
   * @throws {Error} - Si el usuario no existe o la contrase√±a es incorrecta
   */
  async execute({ email, password }) {
    // Buscar usuario por email
    const user = await this.userRepository.findByUserEmail(email);
    if(!user) throw new Error("‚ùå Usuario no encontrado ‚ùå");

    // Validar contrase√±a
    const isValid = await this.passwordEncrypter.comparePassword(password, user.password);
    if(!isValid) throw new Error("‚ùå Contrasena incorrecta ‚ùå");

    // Generar token JWT
    const token = this.tokenGenerator.generate({ id: user.id, email: user.email });

    // Excluir password y campo interno __v antes de retornar
    const { password: _, __v, ...userData } = user.toObject();

    return { token, user: userData };
  }
}
